"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class TokenData {
    constructor(rawData) {
        const expectScopes = rawData.token_type === 'bearer' || rawData.token_type === 'refresh';
        this.active = rawData.active;
        this.clientID = rawData.client_id;
        this.expiresAt = rawData.exp ? new Date(rawData.exp * 1000) : undefined;
        this.issuedAt = new Date(rawData.iat * 1000);
        this.scopes = rawData.scope ? rawData.scope.split(' ') : expectScopes ? [] : undefined;
        this.tokenType = rawData.token_type;
        this.value = rawData.value;
    }
}
exports.TokenData = TokenData;
const pick = (object, ...keys) => {
    const result = {};
    for (const key of keys) {
        const value = object[key];
        if (value !== undefined) {
            result[key] = object[key];
        }
    }
    return result;
};
exports.translateAuthDetails = (rawData) => {
    const authDetails = pick(rawData, 'callbackParams', 'clientID', 'clientSecret', 'consumerKey', 'consumerSecret', 'idTokenJwt', 'tokenResponse', 'tokenSecret', 'signatureMethod');
    if (rawData.idToken) {
        authDetails.idToken = new TokenData(rawData.idToken);
    }
    if (rawData.refreshToken) {
        authDetails.refreshToken = new TokenData(rawData.refreshToken);
    }
    return Object.assign(Object.assign({}, authDetails), { rawData, accessToken: new TokenData(rawData.accessToken) });
};
var TokenType;
(function (TokenType) {
    TokenType["OAuth1"] = "oauth";
    TokenType["OAuth2AccessToken"] = "bearer";
    TokenType["OAuth2RefreshToken"] = "refresh";
    TokenType["OpenIDConnect"] = "id"; // Not defined in RFC7662
})(TokenType = exports.TokenType || (exports.TokenType = {}));
var OAuth1SignatureMethod;
(function (OAuth1SignatureMethod) {
    OAuth1SignatureMethod["HmacSha1"] = "HMAC-SHA1";
    OAuth1SignatureMethod["RsaSha1"] = "RSA-SHA1";
    OAuth1SignatureMethod["PlainText"] = "PLAINTEXT";
})(OAuth1SignatureMethod = exports.OAuth1SignatureMethod || (exports.OAuth1SignatureMethod = {}));
