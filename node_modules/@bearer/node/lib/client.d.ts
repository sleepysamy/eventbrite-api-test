import { AxiosRequestConfig, AxiosInstance, AxiosResponse } from 'axios';
import { transports, Logger } from 'winston';
import { AuthDetails } from './auth-details';
declare class Bearer {
    protected readonly secretKey: string;
    protected options: BearerClientOptions;
    constructor(secretKey: string, options?: Partial<BearerClientOptions>);
    integration(integrationId: string, httpClientSettings?: AxiosRequestConfig): BearerClient;
}
export declare class BearerClient {
    readonly integrationId: string;
    readonly options: BearerClientOptions;
    readonly secretKey: string;
    readonly setupId?: string | undefined;
    readonly authId?: string | undefined;
    protected readonly client: AxiosInstance;
    readonly loggerTransports: {
        console: transports.ConsoleTransportInstance;
    };
    readonly logger: Logger;
    constructor(integrationId: string, options: BearerClientOptions, secretKey: string, setupId?: string | undefined, authId?: string | undefined);
    auth: (authId: string) => BearerClient;
    setup: (setupId: string) => BearerClient;
    authenticate: (authId: string) => BearerClient;
    /**
     * `getAuth` retrieve the auth information (eg. access token) for the current identity.
     *
     * You must call `auth` prior to calling this function
     */
    getAuth: () => Promise<AuthDetails>;
    /**
     * HTTP methods
     */
    get: <DataReturned = any>(endpoint: string, parameters?: BearerRequestParameters | undefined, options?: any) => Promise<AxiosResponse<DataReturned>>;
    head: <DataReturned = any>(endpoint: string, parameters?: BearerRequestParameters | undefined, options?: any) => Promise<AxiosResponse<DataReturned>>;
    post: <DataReturned = any>(endpoint: string, parameters?: BearerRequestParameters | undefined, options?: any) => Promise<AxiosResponse<DataReturned>>;
    put: <DataReturned = any>(endpoint: string, parameters?: BearerRequestParameters | undefined, options?: any) => Promise<AxiosResponse<DataReturned>>;
    delete: <DataReturned = any>(endpoint: string, parameters?: BearerRequestParameters | undefined, options?: any) => Promise<AxiosResponse<DataReturned>>;
    patch: <DataReturned = any>(endpoint: string, parameters?: BearerRequestParameters | undefined, options?: any) => Promise<AxiosResponse<DataReturned>>;
    request: <TData = any>(method: "head" | "get" | "GET" | "delete" | "DELETE" | "HEAD" | "options" | "OPTIONS" | "post" | "POST" | "put" | "PUT" | "patch" | "PATCH" | undefined, endpoint: string, parameters?: BearerRequestParameters | undefined, options?: any) => Promise<AxiosResponse<TData>>;
}
/**
 * Types
 */
declare type BearerHeaders = Record<string, string | number | undefined>;
interface BearerRequestParameters {
    headers?: BearerHeaders;
    query?: string | Record<string, string | number>;
    body?: any;
}
interface BearerClientOptions {
    authHost: string;
    host: string;
    timeout?: number;
    httpClientSettings: AxiosRequestConfig;
}
declare const _default: (apiKey: string | undefined, options?: BearerClientOptions | undefined) => Bearer;
/**
 * Exports
 */
export default _default;
export { Bearer as bearer };
