export declare class TokenData {
    readonly active: boolean;
    readonly clientID: string;
    readonly expiresAt?: Date;
    readonly issuedAt: Date;
    readonly scopes?: string[];
    readonly tokenType: TokenType;
    readonly value: string;
    constructor(rawData: TokenRawData);
}
export declare const translateAuthDetails: (rawData: any) => AuthDetails;
export declare enum TokenType {
    OAuth1 = "oauth",
    OAuth2AccessToken = "bearer",
    OAuth2RefreshToken = "refresh",
    OpenIDConnect = "id"
}
declare type TokenRawData = {
    active: boolean;
    client_id: string;
    exp?: number;
    iat: number;
    scope?: string;
    token_type: TokenType;
    value: string;
};
interface AuthDetailsBase {
    callbackParams: Record<string, string>;
    rawData: any;
    tokenResponse: {
        body: any;
        headers: Record<string, string>;
    };
}
export declare enum OAuth1SignatureMethod {
    HmacSha1 = "HMAC-SHA1",
    RsaSha1 = "RSA-SHA1",
    PlainText = "PLAINTEXT"
}
export interface OAuth1AuthDetails extends AuthDetailsBase {
    consumerKey: string;
    consumerSecret: string;
    signatureMethod: OAuth1SignatureMethod;
    tokenSecret: string;
    accessToken: TokenData;
}
export interface OAuth2AuthDetails extends AuthDetailsBase {
    clientID: string;
    clientSecret: string;
    idTokenJwt?: any;
    accessToken: TokenData;
    idToken?: TokenData;
    refreshToken?: TokenData;
}
export declare type AuthDetails = OAuth1AuthDetails | OAuth2AuthDetails;
export {};
