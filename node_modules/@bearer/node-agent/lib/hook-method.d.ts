export declare class ProxyHookAction<T> {
    receiver: T;
    constructor(receiver: T);
}
export declare const hookMethod: <T, DecoratedObject extends FunctionObj<T>, MemberName extends keyof DecoratedObject, MethodParameters extends Parameters<DecoratedObject[MemberName]>, HookAction = void | ProxyHookAction<DecoratedObject>, ReturnedType = ReturnType<DecoratedObject[MemberName]>>(obj: DecoratedObject, name: MemberName, observer: (...args: MethodParameters) => HookAction | Generator<HookAction, void, ReturnType<DecoratedObject[MemberName]>>) => void;
/**
 * Typing
 */
declare type FunctionType = (...args: any) => any;
declare type FunctionObj<T> = {
    [K in keyof T]: T[K] extends FunctionType ? FunctionType : never;
};
export {};
