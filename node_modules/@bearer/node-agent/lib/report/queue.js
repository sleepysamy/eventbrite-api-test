"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueueProcessor = exports.Signal = void 0;
const logger_1 = require("../logger");
const debug = logger_1.logger.extend('report:queue');
const MAX_OUTSTANDING_REQUESTS = 100;
const STOP_GRACE_PERIOD_SECS = 20;
class Signal {
    constructor() {
        this.isSet = false;
        this.wakeup = () => { };
    }
    wait() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.isSet) {
                yield new Promise(resolve => {
                    this.wakeup = resolve;
                });
            }
            this.isSet = false;
        });
    }
    set() {
        this.isSet = true;
        this.wakeup();
    }
}
exports.Signal = Signal;
class QueueProcessor {
    constructor() {
        this.stopping = false;
        this.forceStopSignal = new Signal();
        this.dequeueSignal = new Signal();
        this.stoppedSignal = new Signal();
        this.queue = [];
    }
    run(handler) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                while (!this.forceStopSignal.isSet && (!this.stopping || this.hasItems())) {
                    const item = yield this.dequeue();
                    if (item) {
                        yield handler(item, this.forceStopSignal);
                    }
                }
            }
            finally {
                this.stoppedSignal.set();
            }
        });
    }
    enqueue(item) {
        debug('enqueue %j', item);
        if (this.queue.length > MAX_OUTSTANDING_REQUESTS) {
            debug(`queue full (${this.queue.length} outstanding logs). dropping oldest log`);
            this.queue.shift();
        }
        this.queue.push(item);
        this.dequeueSignal.set();
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.stopping) {
                return;
            }
            debug(`stopping log reporter, waiting for ${this.queue.length} outstanding logs`);
            this.stopping = true;
            yield preventExit(() => __awaiter(this, void 0, void 0, function* () {
                const graceTimer = setTimeout(() => {
                    debug(`log reporter didn't stop within ${STOP_GRACE_PERIOD_SECS}s, forcing stop`);
                    this.forceStopSignal.set();
                    this.dequeueSignal.set();
                }, STOP_GRACE_PERIOD_SECS * 1000);
                this.dequeueSignal.set();
                yield this.stoppedSignal.wait();
                clearTimeout(graceTimer);
            }));
            if (this.hasItems()) {
                debug(`dropping ${this.queue.length} outstanding logs`);
            }
            debug('stopped');
        });
    }
    dequeue() {
        return __awaiter(this, void 0, void 0, function* () {
            while (!this.stopping && !this.hasItems()) {
                yield this.dequeueSignal.wait();
            }
            return this.queue.shift();
        });
    }
    hasItems() {
        return this.queue.length !== 0;
    }
}
exports.QueueProcessor = QueueProcessor;
// This is a hack to keep the event loop running
const preventExit = (body) => __awaiter(void 0, void 0, void 0, function* () {
    const blocker = setInterval(() => { }, 1000000000);
    try {
        yield body();
    }
    finally {
        clearInterval(blocker);
    }
});
