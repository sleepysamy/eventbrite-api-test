"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReportType = exports.deliver = exports.enqueue = exports.agentInfo = exports.runtimeInfo = void 0;
const os_1 = __importDefault(require("os"));
const config_1 = require("../config");
const http_client_1 = require("../http-client");
const logger_1 = require("../logger");
const queue_1 = require("./queue");
const retry_1 = require("../retry");
const debug = logger_1.logger.extend('report:delivery');
const RETRY_DELAY_BASE_MS = 100;
const RETRY_DELAY_MAX = 10000;
const MAX_ATTEMPTS = 5;
const STOP_SIGNALS = ['SIGHUP', 'SIGINT', 'SIGTERM'];
exports.runtimeInfo = {
    version: process.version,
    arch: os_1.default.arch(),
    platform: os_1.default.platform(),
    type: os_1.default.type(),
    hostname: os_1.default.hostname() || 'unknown'
};
exports.agentInfo = {
    type: 'node',
    version: require('../../package.json').version
};
exports.enqueue = (report) => queueProcessor.enqueue(report);
function deliver(log, stopSignal) {
    return __awaiter(this, void 0, void 0, function* () {
        const payload = {
            runtime: exports.runtimeInfo,
            agent: Object.assign(Object.assign({}, exports.agentInfo), { log_level: config_1.Configuration.logLevel }),
            secretKey: config_1.Configuration.secretKey,
            appEnvironment: config_1.Configuration.environment,
            logs: [log]
        };
        let attempt = 1;
        while (!(yield sendRequest(payload, attempt)) && !stopSignal.isSet && attempt < MAX_ATTEMPTS) {
            const sleepTime = Math.min(retry_1.exponentialBackoffMs({ attempt, delay: RETRY_DELAY_BASE_MS }), RETRY_DELAY_MAX);
            debug(`retrying in ${sleepTime}ms`);
            yield sleep(sleepTime);
            attempt += 1;
        }
    });
}
exports.deliver = deliver;
const sendRequest = (payload, attempt) => __awaiter(void 0, void 0, void 0, function* () {
    let res;
    try {
        debug('sending report (attempt=%d) %j', attempt, payload);
        res = yield http_client_1.httpPost({
            body: payload,
            hostname: config_1.Configuration.reportHost,
            path: '/logs',
            headers: {
                'Content-Type': 'application/json',
                Authorization: config_1.Configuration.secretKey
            }
        });
    }
    catch (e) {
        debug('failed to send report', e);
        return false;
    }
    if (res.statusCode !== 200) {
        debug('failed to send report %j', res);
        return false;
    }
    return true;
});
const sleep = (delay) => new Promise(resolve => {
    setTimeout(resolve, delay).unref();
});
const queueProcessor = new queue_1.QueueProcessor();
queueProcessor.run(deliver);
const signalStop = (signalName) => __awaiter(void 0, void 0, void 0, function* () {
    for (const name of STOP_SIGNALS) {
        process.removeListener(name, signalStop);
    }
    yield queueProcessor.stop();
    // By sending the signal again after stopping, we
    // ensure the default behaviour is maintained correctly
    process.kill(process.pid, signalName);
});
process.once('beforeExit', () => {
    queueProcessor.stop();
});
for (const name of STOP_SIGNALS) {
    process.once(name, signalStop);
}
var ReportType;
(function (ReportType) {
    ReportType["ApiCall"] = "REQUEST_END";
    ReportType["ConnectionError"] = "REQUEST_ERROR";
})(ReportType = exports.ReportType || (exports.ReportType = {}));
