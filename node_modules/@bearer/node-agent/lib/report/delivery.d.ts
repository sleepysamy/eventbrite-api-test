/// <reference types="node" />
import http from 'http';
import { Protocol, RemediationData } from '../stage';
import { DataCollectionRule, RemediationType, StageType, LogLevel } from '../new-rules/types';
import { Signal } from './queue';
export declare const runtimeInfo: {
    version: string;
    arch: string;
    platform: NodeJS.Platform;
    type: string;
    hostname: string;
};
export declare const agentInfo: {
    type: "node";
    version: any;
};
export declare const enqueue: (report: ReportLog) => void;
export declare function deliver(log: ReportLog, stopSignal: Signal): Promise<void>;
export declare type ReportLog = RestrictedReportLog | FullReportLog | NewApiReportLog;
export interface TriggeredRule {
    id: string;
    filterHash?: string;
    remediationTypes: RemediationType[];
}
export declare type ActiveDataCollectionRule = Pick<DataCollectionRule, 'filterHash' | 'params' | 'signature'>;
export declare enum ReportType {
    ApiCall = "REQUEST_END",
    ConnectionError = "REQUEST_ERROR"
}
export declare type ConnectionLogData = {
    hostname: string;
    port: number;
    protocol: Protocol;
};
export interface RequestLogData {
    method: string;
    path: string;
    url: string;
    requestId: string;
}
export interface FullRequestLogData {
    requestHeaders: http.OutgoingHttpHeaders;
}
export interface ResponseLogData {
    statusCode?: number;
}
export interface FullResponseLogData {
    responseHeaders: http.IncomingHttpHeaders;
}
export interface BodiesLogData {
    requestBody: string;
    requestBodyPayloadSha: string;
    responseBody: string;
    responseBodyPayloadSha: string;
}
export declare type NewApiReportLog = {
    logLevel: LogLevel.Detected;
} & ConnectionLogData;
export declare type RestrictedReportLog = ConnectionLogData & Partial<RequestLogData> & Partial<ResponseLogData> & {
    logLevel: LogLevel;
    startedAt: number;
    endedAt: number;
    type: ReportType;
    stageType: StageType;
    instrumentation: {
        requestBenchmark?: number;
        responseContentLength?: number;
        adapterBenchmark?: number;
    };
    activeDataCollectionRules: ActiveDataCollectionRule[];
    activeRules: TriggeredRule[];
    errorCode?: string;
    errorFullMessage?: string;
    remediationData: RemediationData;
};
export declare type FullReportLog = RestrictedReportLog & Partial<FullRequestLogData> & Partial<FullResponseLogData> & Partial<BodiesLogData>;
