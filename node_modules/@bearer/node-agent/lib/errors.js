"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BodyParsingError = exports.InternalError = exports.RemoteConfigError = exports.RequestTimeout = exports.RequestBlocked = exports.ReportableError = exports.CustomError = void 0;
class CustomError extends Error {
    constructor(message) {
        super(message);
        Object.setPrototypeOf(this, new.target.prototype);
        this.name = this.constructor.name;
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, this.constructor);
        }
        else {
            this.stack = new Error(message).stack;
        }
    }
}
exports.CustomError = CustomError;
class ReportableError extends CustomError {
    constructor(message, code) {
        super(message);
        this.code = code;
    }
}
exports.ReportableError = ReportableError;
class RequestBlocked extends ReportableError {
    constructor() {
        super('Request blocked by Bearer Agent', RequestBlocked.ERROR_CODE);
    }
}
exports.RequestBlocked = RequestBlocked;
RequestBlocked.ERROR_CODE = 'BEARER_BLOCKED_REQUEST';
class RequestTimeout extends ReportableError {
    constructor(timeout, hostname) {
        super(`Timeout of ${timeout} ms for hostname ${hostname} exceeded`, RequestTimeout.ERROR_CODE);
    }
}
exports.RequestTimeout = RequestTimeout;
RequestTimeout.ERROR_CODE = 'BEARER_REQUEST_TIMEOUT';
class RemoteConfigError extends ReportableError {
    constructor(responseCode, errorCode, message) {
        super(`${errorCode || responseCode}: ${message}`, RemoteConfigError.ERROR_CODE);
        this.responseCode = responseCode;
        this.errorCode = errorCode;
    }
}
exports.RemoteConfigError = RemoteConfigError;
RemoteConfigError.ERROR_CODE = 'BEARER_REQUEST_CONFIG_ERROR';
class InternalError extends CustomError {
}
exports.InternalError = InternalError;
class BodyParsingError extends InternalError {
    constructor(message, bodySize) {
        super(message);
        this.bodySize = bodySize;
    }
}
exports.BodyParsingError = BodyParsingError;
