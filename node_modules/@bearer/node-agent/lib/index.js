"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.init = void 0;
const semver_1 = __importDefault(require("semver"));
const interceptor_1 = require("./interceptor");
const config_1 = require("./config");
const logger_1 = require("./logger");
const http_client_1 = require("./http-client");
let initialized = false;
const debug = logger_1.logger.extend('main');
exports.init = (options = {}) => __awaiter(void 0, void 0, void 0, function* () {
    debug('init');
    let envOptions = {};
    if (options.environment) {
        envOptions = {
            environment: config_1.environmentName(options.environment)
        };
    }
    if (initialized) {
        yield config_1.Configuration.reset(Object.assign(Object.assign({}, options), envOptions));
        debug('already initialized: skipping');
        return;
    }
    debug('Intercepting http');
    // TODO: check if the http module has already been loaded
    interceptor_1.intercept(require('http'));
    if (semver_1.default.satisfies(process.version, '>=9.0.0 || 8.9.0')) {
        debug('Intercepting https');
        http_client_1.setHttpsRequest(interceptor_1.intercept(require('https')));
    }
    yield config_1.Configuration.reset(Object.assign(Object.assign({}, options), envOptions));
    initialized = true;
    debug('initialized');
});
exports.default = { init: exports.init };
