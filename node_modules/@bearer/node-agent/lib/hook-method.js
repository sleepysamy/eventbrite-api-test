"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hookMethod = exports.ProxyHookAction = void 0;
const errors_1 = require("./errors");
const logger_1 = require("./logger");
const debug = logger_1.logger.extend('hook-method');
const errorSafe = (args, body) => {
    try {
        body();
    }
    catch (e) {
        debug('error while executing : %j', e);
        if (e instanceof errors_1.ReportableError) {
            throw e;
        }
        debug('Unexpected error in hooked method args=%O, error=%O', args, e);
    }
};
class ProxyHookAction {
    constructor(receiver) {
        this.receiver = receiver;
    }
}
exports.ProxyHookAction = ProxyHookAction;
exports.hookMethod = (obj, name, observer) => {
    const original = obj[name];
    obj[name] = function (...args) {
        let action = void 0;
        let generator;
        const isGenerator = (maybeGenerator) => {
            var _a;
            return ((_a = maybeGenerator) === null || _a === void 0 ? void 0 : _a.next) !== undefined;
        };
        errorSafe(args, () => {
            const generatorOrAction = observer.apply(this, args);
            if (isGenerator(generatorOrAction)) {
                generator = generatorOrAction;
                action = generator.next().value;
            }
            else {
                action = generatorOrAction;
            }
        });
        const method = action instanceof ProxyHookAction ? action.receiver[name] : original;
        const result = method.apply(this, args);
        errorSafe(args, () => {
            if (generator) {
                generator.next(result);
            }
        });
        return result;
    };
};
