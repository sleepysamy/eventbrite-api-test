import { Rule, Filter, DataCollectionRule, LogLevel } from './new-rules/types';
export declare class ConfigurationType {
    private nonRemoteOptions;
    private options;
    private syncTimer?;
    dump(params?: {
        filter?: boolean;
    }): {
        configHost: string;
        reportHost: string;
        maximumBodySize: number;
        rules: Rule[];
        dataCollectionRules: DataCollectionRule[];
        filters: Record<string, Filter>;
        generatedAt: number;
        debugLevel: string;
        disabled: boolean;
        environment: string | undefined;
        filtered: string[];
        from?: string | undefined;
        ignored: string[];
        logLevel: LogLevel;
        payloadTracking: boolean;
        secretKey?: string | undefined;
        stripSensitiveData: boolean;
        stripSensitiveKeys: RegExp;
        stripSensitiveRegex: RegExp;
        throttleDisabled: boolean;
    };
    reset(options?: Partial<InternalConfigOptions>): Promise<void>;
    private readFromEnv;
    private readFromConfigFile;
    private readRemote;
    private tryRefreshRemote;
    private startSync;
}
export declare const Configuration: ConfigurationType;
export declare function environmentName(value: string | undefined): string | undefined;
/**
 * Typing
 */
export interface ConfigOptions {
    debugLevel: string;
    disabled: boolean;
    environment: string | undefined;
    filtered: string[];
    from?: string;
    ignored: string[];
    logLevel: LogLevel;
    payloadTracking: boolean;
    secretKey?: string;
    stripSensitiveData: boolean;
    stripSensitiveKeys: RegExp;
    stripSensitiveRegex: RegExp;
    throttleDisabled: boolean;
}
export interface InternalConfigOptions extends ConfigOptions {
    configHost: string;
    reportHost: string;
    maximumBodySize: number;
    rules: Rule[];
    dataCollectionRules: DataCollectionRule[];
    filters: Record<string, Filter>;
    generatedAt: number;
}
export interface ConfigurationType extends InternalConfigOptions {
}
