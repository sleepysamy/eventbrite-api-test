import { DataCollectionRule, Rule, BlockRequestRemediation, RetryRemediation, TimeoutRemediation } from './types';
import { FilterEvaluator } from './filters';
import { Stage } from '../stage';
/**
 * The RuleManager evaluates the filters for each rule using the state from a
 * Stage. It maintains a list of active rules, data collection rules, and
 * remediations.
 */
export declare class RuleManager {
    private filterEvaluator;
    private rules;
    private dataCollectionRules;
    activeRules: Rule[];
    activeDataCollectionRules: DataCollectionRule[];
    blockRemediation?: BlockRequestRemediation;
    retryRemediation?: RetryRemediation;
    timeoutRemediation?: TimeoutRemediation;
    private config;
    constructor(filterEvaluator: FilterEvaluator, rules: Rule[], dataCollectionRules: DataCollectionRule[]);
    evaluateRules(stage: Stage): void;
    get logLevel(): import("./types").LogLevel;
    get sanitizeKeyPattern(): RegExp | undefined;
    get sanitizeValuePattern(): RegExp | undefined;
    get active(): boolean;
    private getConfig;
    private getActiveRules;
    private getRemediation;
}
