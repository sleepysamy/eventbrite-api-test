"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parse = void 0;
const querystring_1 = __importDefault(require("querystring"));
const zlib_1 = require("zlib");
const logger_1 = require("./logger");
const errors_1 = require("./errors");
const debug = logger_1.logger.extend('body');
const parseableContentType = /json|text|xml|x-www-form-urlencoded/i;
exports.parse = ({ body, encoding, contentType, maxBodySize }) => {
    if (body === undefined || body.length === 0) {
        if (!contentType) {
            return { value: '' };
        }
        throw new errors_1.BodyParsingError('(no body)', 0);
    }
    if (!isTextBased(contentType)) {
        throw new errors_1.BodyParsingError('(not showing binary data)', body.length);
    }
    if (encoding && body && /gzip/i.test(encoding)) {
        try {
            body = zlib_1.gunzipSync(body);
        }
        catch (e) {
            debug('failed to gunzip the body:');
            debug(e);
        }
    }
    if (body && body.length > maxBodySize) {
        throw new errors_1.BodyParsingError('(omitted due to size)', body.length);
    }
    return { size: body === null || body === void 0 ? void 0 : body.length, value: parseContent(body, contentType) };
};
const parseContent = (value, contentType) => {
    const valueStr = (value === null || value === void 0 ? void 0 : value.toString()) || '';
    if (!contentType) {
        return valueStr;
    }
    try {
        switch (true) {
            case /^application\/json/i.test(contentType):
                return JSON.parse(valueStr);
            case /^application\/x-www-form-urlencoded/i.test(contentType):
                return querystring_1.default.parse(valueStr);
        }
    }
    catch (_a) {
        // Ignore parsing errors
    }
    return valueStr;
};
const isTextBased = (contentType) => contentType && parseableContentType.test(contentType);
