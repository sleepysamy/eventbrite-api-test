"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sanitizer = void 0;
const FILTERED = '[FILTERED]';
const FILTERED_URL_SAFE = '%5BFILTERED%5D';
class Sanitizer {
    constructor({ globalKeyPattern, ruleKeyPattern, globalValuePattern, ruleValuePattern, filtered }) {
        this.globalKeyPattern = globalKeyPattern;
        this.ruleKeyPattern = ruleKeyPattern;
        this.globalValuePattern = globalValuePattern;
        this.ruleValuePattern = ruleValuePattern;
        this.filtered = filtered;
    }
    sanitize(value) {
        switch (true) {
            case Array.isArray(value):
                return this.sanitizeArray(value);
            case value === null || value === undefined:
                return value;
            case value.constructor === Object || value.constructor === undefined:
                return this.sanitizeObject(value);
            case typeof value === 'string':
                return this.sanitizeString(value);
            default:
                return value;
        }
    }
    sanitizeUrlPath(path) {
        return this.sanitizeString(path, FILTERED_URL_SAFE);
    }
    sanitizeObject(object) {
        return Object.keys(object).reduce((acc, key) => {
            const value = this.keyIsSanitized(key) ? FILTERED : this.sanitize(object[key]);
            acc[key] = value;
            return acc;
        }, {});
    }
    sanitizeArray(array) {
        return array.map(item => this.sanitize(item));
    }
    keyIsSanitized(key) {
        if (this.globalKeyPattern && this.globalKeyPattern.test(key)) {
            return true;
        }
        if (this.ruleKeyPattern && this.ruleKeyPattern.test(key)) {
            return true;
        }
        // TODO: prepare regexp on initialization
        return this.filtered.some((filter) => new RegExp(filter).test(key));
    }
    sanitizeString(value, replacement = FILTERED) {
        if (this.globalValuePattern) {
            value = value.replace(this.globalValuePattern, replacement);
        }
        if (this.ruleValuePattern) {
            value = value.replace(this.ruleValuePattern, replacement);
        }
        return value;
    }
}
exports.Sanitizer = Sanitizer;
